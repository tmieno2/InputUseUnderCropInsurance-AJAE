---
title: Run backward induction and simulations
---

# Preparation

## Load pacakges

```{r}
library("dplyr")
library("parallel")
library("data.table")
library("mgcv")
library("mc2d")
library("Rcpp")
library("quadprog")
```

## Load functions

```{r}
#--- crop insurance parameters and functions ---#
source("code/R/utility.R")

#--- sourcing cpp simulation function ---#
Rcpp::sourceCpp(here::here("code/R/calc_premium.cpp"))
```

## Load simulation parameters

These simulation parameters are defined in **code/0-setup-simulations.qmd**.

```{r}
load("results/pacakged_parameters.RData")
```

# Cases considered

```{r}
#--- coverage levels and their corresponding subsidy levels ---#
coverage_subsidy_data <-
  data.table(
    coverage_level = c(0.70, 0.80, 0.85, 0.90),
    subsidy_level = c(0.59, 0.48, 0.38, 0.28)
  )

utility_type_ls <- c("RN", "CA1", "CA2", "CR")
insurance_type_ls <- c("YP", "RP", "RPHPE")

#--- all the cases considered ---#
cases <-
  #--- utility and insurance types ---#
  data.table::CJ(
    utility_type = utility_type_ls,
    insurance_type = insurance_type_ls
  ) %>%
  #--- join with the coverage level data ---#
  expand_grid_df(., coverage_subsidy_data) %>%
  .[, file_pattern := paste0(
    "_cov_", coverage_level * 100,
    "_ins_", insurance_type,
    "_util_", utility_type,
    "_rho_", abs(rho) * 10,
    "_pCorn_", price_data$p_price * 100,
    "_pN_", price_data$p_N * 100
  )] %>%
  .[, conc_prod_file_name :=
    paste0(
      "results/concurrent_production",
      file_pattern,
      ".rds"
    )] %>%
  .[, BI_results_file_name :=
    paste0(
      "results/BI_results",
      file_pattern,
      ".rds"
    )] %>%
  .[, path_results_file_name :=
    paste0(
      "results/path_results",
      file_pattern,
      ".rds"
    )] %>%
  .[order(coverage_level, insurance_type, utility_type), ]
```

# Static simulation

## Simulate concurrent production

### Generate yield-hprice data 

```{r}
#--- number of samples to draw from the joint yield-hp distribution ---#
B <- 10000

#--- generate price and yield in U() ---#
yield_hprice_data <- generate_yield_hprice_data(B, sigma, price_data)
```

### Generate production data

```{r}
#| eval: false
production_data <-
  mclapply(
    N_data$N_seq,
    \(Ni) {
      p_N <- prod_data$p_pars[1] + prod_data$p_pars[2] * sqrt(Ni) + prod_data$p_pars[3] * Ni
      q_N <- prod_data$q_pars[1] + prod_data$q_pars[2] * sqrt(Ni) + prod_data$q_pars[3] * Ni

      yield_temp <- qbeta(yield_hprice_data$yield_u, p_N, q_N)
      yield <- yield_temp * (prod_data$max_y - prod_data$min_y) + prod_data$min_y

      return_data <-
        data.table(
          yield = yield,
          h_price = yield_hprice_data$h_price
        ) %>%
        .[, N := Ni] %>%
        .[, draw_id := 1:.N]
    }
  ) %>%
  rbindlist() %>%
  .[, raw_revenue := h_price * yield * prod_data$acres]

saveRDS(production_data, "results/production_data.rds")
```

## Find the optimal N rate without insurance by utility type

```{r}
profit_no_ins <-
  readRDS("results/production_data.rds") %>%
  .[, profit := raw_revenue - price_data$p_N * N * prod_data$acres]

opt_N_no_ins <-
  lapply(
    utility_type_ls,
    \(x) {
      u_conversion <- utility_gen(utility_type = x)
      opt_N_no_ins <-
        copy(profit_no_ins) %>%
        .[, utility := u_conversion(profit)] %>%
        .[, .(utility = mean(utility)), by = N] %>%
        find_opt_N_by_gam(., dep_var = "utility", N_data$N_seq_for_search) %>%
        .[, utility_type := x]
    }
  ) %>%
  rbindlist()

saveRDS(opt_N_no_ins, "results/opt_N_no_ins.rds")
```

## Calculate premium pyament amount

```{r}
#| eval: false

premium_data <-
  data.table::CJ(
    APH = APH_list,
    insurance_type = insurance_type_ls
  ) %>%
  expand_grid_df(., coverage_subsidy_data) %>%
  rowwise() %>%
  dplyr::mutate(premium_ls = list(
    get_premium(insurance_type, APH, coverage_level, subsidy_level, price_data, ci_data, prod_data$acres)
  )) %>%
  dplyr::mutate(premium_data = list(
    data.table(
      premium = premium_ls$premium,
      premium_rate = premium_ls$premium_rate
    )
  )) %>%
  dplyr::select(-premium_ls) %>%
  tidyr::unnest(premium_data) %>%
  data.table() %>%
  rowwise() %>%
  nest_by(insurance_type, coverage_level) %>%
  dplyr::mutate(data = list(
    smooth_premium(data)
  )) %>%
  tidyr::unnest(data) %>%
  data.table()

saveRDS(premium_data, "results/premium_data.rds")
```

## Concurrent profit/utility under different insurance types, coverage levels, and utility types. 

```{r}
#| eval: false

production_data_slim <-
  readRDS("results/production_data.rds") %>%
  expand_grid_df(., data.table(APH = APH_list)) %>%
  .[, APH_next := yield / n_window + (n_window - 1) * APH / n_window] %>%
  .[, .(yield, h_price, N, APH, APH_next, raw_revenue)]

premium_data <- readRDS("results/premium_data.rds")

mclapply(
  1:nrow(cases),
  \(i) {
    print(i)

    #--- set the coverage and subsidy level ---#
    cov_level <- cases[i, coverage_level]
    sub_per <- cases[i, subsidy_level]
    ins_type <- cases[i, insurance_type]
    util_type <- cases[i, utility_type]
    conc_prod_file_name <- cases[i, conc_prod_file_name]

    get_revenue <- gen_revenue_function(insurance_type = ins_type)
    u_conversion <- utility_gen(utility_type = util_type)

    premium_data_slim <-
      premium_data %>%
      .[insurance_type == ins_type & coverage_level == cov_level, .(APH, premium)]

    N_APH_utility <-
      production_data_slim %>%
      .[, revenue_with_indemnity := get_revenue(raw_revenue, price_data, prod_data, APH, cov_level, yield, h_price)] %>%
      premium_data_slim[., on = .(APH)] %>%
      .[, N_cost := price_data$p_N * N * prod_data$acres] %>%
      .[, profit := revenue_with_indemnity - N_cost - premium] %>%
      .[, utility := u_conversion(profit)] %>%
      .[, .(N, APH, utility, APH_next)]

    saveRDS(N_APH_utility, conc_prod_file_name)
  },
  mc.cores = min(detectCores() - 2, 6),
  mc.preschedule = FALSE
)

```

## Find the optimal N rate and its associated utility/profit for the static problem

The code below finds the optimal level of N for a given level of APH under different coverage levels, insurance types, and utility types **without considering the dynamics of APH**. The solution is equivalent to the static optimization done by Babcock. This also corresponds to the optimal N level at the final period of the dynamic optimization, where the impact of N level on APH does not need to be considered.

The code below loops over the coverage levels defined in `coverage_subsidy_data`. In each iteration, there is a loop over insurance type stored in `utility_type_ls`. In each of the inner loop, the optimal level of N is found for the given level of APH under different coverage levels, insurance types, and utility types **without considering the dynamics of APH**. The resulting object is named `opt_N_static` and it is saved as a single RDS file for later use. 

`opt_N_static` has the following variables:

+ `APH`: APH
+ `coverage_level`: coverage lvel
+ `insurance_type`: insurance type
+ `N_star`: optimal N
+ `max_eu`: profit/utility associated with `N_star`

```{r}
opt_N_static <-
  parallel::mclapply(
    #--- loop over coverage level ---#
    1:nrow(cases),
    \(i) {
      #--- set the coverage and subsidy level ---#
      cov_level <- cases[i, coverage_level]
      sub_per <- cases[i, subsidy_level]
      ins_type <- cases[i, insurance_type]
      util_type <- cases[i, utility_type]
      conc_prod_file_name <- cases[i, conc_prod_file_name]

      #--- profress tracker ---#
      print(paste0("Working on ", i, "/", nrow(cases)))

      #--- Load the concurrent production data ---#
      opt_N_data <-
        readRDS(conc_prod_file_name) %>%
        #--- average by APH, coverage level, insurance type, and N ---#
        .[, .(value = mean(utility)), by = .(APH, N)] %>%
        #--- nest by APH, coverage level, and insurance type ---#
        nest_by(APH) %>%
        #--- find optimal N by APH, coverage level, and insurance type ---#
        dplyr::mutate(opt_N_data = list(
          find_opt_N_by_gam(
            data = data,
            N_seq_for_search_ls = N_data$N_seq_for_search
          )
        )) %>%
        #--- remove the data ---#
        dplyr::select(-data) %>%
        #--- unnest ---#
        tidyr::unnest(cols = c(opt_N_data)) %>%
        data.table() %>%
        .[, coverage_level := cov_level] %>%
        .[, insurance_type := ins_type] %>%
        .[, utility_type := util_type]

      return(opt_N_data)
    },
    mc.cores = min(parallel::detectCores() - 2, 6),
    mc.preschedule = FALSE
  ) %>%
  rbindlist()

saveRDS(opt_N_static, "results/opt_N_static.rds")
```


# Solve dynamic optimization via backward induction


```{r}
opt_N_static <- readRDS("results/opt_N_static.rds")

mclapply(
  1:nrow(cases),
  \(x) {
    print(paste0("Case ", x))

    #--- set the coverage and subsidy level ---#
    cov_level <- cases[x, coverage_level]
    sub_per <- cases[x, subsidy_level]
    ins_type <- cases[x, insurance_type]
    util_type <- cases[x, utility_type]
    con_prod_file_name <- cases[x, conc_prod_file_name]
    BI_results_file_name <- cases[x, BI_results_file_name]

    if (!file.exists(BI_results_file_name)) {
      #++++++++++++++++++++++++++++++++++++
      #+ Load results
      #++++++++++++++++++++++++++++++++++++
      #--- production data ---#
      production_data <- readRDS(con_prod_file_name)

      #--- Value function at the final period ---#
      VF_T <-
        opt_N_static %>%
        .[coverage_level == cov_level & insurance_type == ins_type & utility_type == util_type, .(APH, N_star, max_eu)]

      #++++++++++++++++++++++++++++++++++++
      #+ Backward induction
      #++++++++++++++++++++++++++++++++++++
      BI_results <- BI(VF_T, production_data, APH_data)

      saveRDS(BI_results, BI_results_file_name)
    }
  },
  # mc.cores = min(detectCores() - 2, 4),
  mc.cores = 4,
  mc.preschedule = FALSE
)
```



# Simulate Expected Path of N and APH

```{r}
#--- specify the starting point ---#
APH_0 <- 136.5 # starting APH

#--- number of iterations for simulation ---#
B_sim <- 50000

mclapply(
  1:nrow(cases),
  \(x) {
    print(paste0("Case ", x))

    #--- set the coverage and subsidy level ---#
    cov_level <- cases[x, coverage_level]
    sub_per <- cases[x, subsidy_level]
    ins_type <- cases[x, insurance_type]
    util_type <- cases[x, utility_type]
    BI_results_file_name <- cases[x, BI_results_file_name]
    path_results_file_name <- cases[x, path_results_file_name]

    BI_results <- readRDS(BI_results_file_name)

    #--- run simulation ---#
    path <- simulate_path(BI_results, prod_data)

    #--- save the results ---#
    saveRDS(path, path_results_file_name)
  },
  mc.cores = detectCores() - 2,
  mc.preschedule = FALSE
)

```