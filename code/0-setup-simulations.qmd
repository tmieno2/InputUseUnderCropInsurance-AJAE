

# Set parameters

## Optimization/Simulation parameters

### Nitrogen rates

`N_seq`: sequence of N rates at which yield will be generated
`N_seq_for_search`: sequence of N rates used for grid search in trying to identify the optimal N rate

```{r}
N_min <- 0
N_max <- 240
N_seq <- seq(N_min, N_max, by = 2)

search_increment <- 0.1
N_seq_for_search <- seq(N_min, N_max, by = search_increment)

N_data <-
  list(
    N_min = N_min,
    N_max = N_max,
    N_seq = N_seq,
    search_increment = search_increment,
    N_seq_for_search = N_seq_for_search
  )
```

### APH

+ `APH_list`: sequence of APH value at which 
  + profit is calculated under various types of crop insurance programs
  + optimal N is found

```{r}
APH_min <- 100
APH_max <- 160
APH_list <- seq(APH_min, APH_max, by = 1)

APH_data <-
  list(
    APH_min = APH_min,
    APH_max = APH_max,
    APH_list = APH_list
  )
```

### Production parameters

```{r}
prod_data <-
  list(
    #--- production acres (does not affect optimal N) ---#
    acres = 100,
    #--- crop function parameters ---#
    min_y = 48,
    max_y = 202,
    p_pars = c(3.14, -0.0921, 0.00603),
    q_pars = c(12.30, -1.353, 0.0456)
  )
```

### Misc

```{r}
#--- total number of periods ---#
T <- 50

#--- Number of knots for Bernstein smoothing ---#
Nk <- 5

#--- Number of years to be used to calculate APH ---#
n_window <- 10

#--- discount rate ---#
disc <- 0.04
```

## Prices

```{r}
#--- mean and variance of the corn price ---#
# do not use ln_var and ln_mean as they are used in premium calculation
# parameters defined here are used for simulating the actual realization
# of harvest price
p_price <- 2.20 # projected price
pvf <- 0.17535 # price volatility factor
ln_var_p <- log(pvf^2 + 1)
ln_mean_p <- log(p_price) - ln_var_p / 2
hp_prop <- c(ln_mean_p, sqrt(ln_var_p))

price_data <-
  list(
    p_price = p_price, # projected price
    pvf = pvf, # price volatility factor
    ln_var_p = ln_var_p,
    ln_mean_p = ln_mean_p,
    hp_prop = hp_prop,
    p_N = 0.15, # N price ($/lb)
    other_cost = 0 # ($/acre)
  )
```


## Join distribution of yield and harvest price

```{r}
rho <- -0.3 # correlation coefficient
mu <- c(0, 0) # mean
sigma <- matrix(c(1, rho, rho, 1), nrow = 2, ncol = 2) # covariance mat
```

## Insurance parameters for the Sioux County

This section defines exogeneous parameters necessary to calculate premium rate and amount for the Sioux County, IA. 

### Exogenous Parameters

```{r}
#--------------------------
# section 1
#--------------------------
#--- Projected Price ---#
# vary by year, set nationally
# proj_price <- 4.15

# This is farmers' choice. But, it seems okay to
# assume farmers insure the whole acres
insured_share_percent <- 1

#--------------------------
# section 2
#--------------------------
# ask Cory
optional_unit_discount_factor <- 1
unit_structure_discount_factor <- 1

#--------------------------
# section 3
#--------------------------
# This information is available at ADM "A01040"
# It should be okay to assume these are fixed over time
rate_differential_factor <- 2.057
py_rate_differential_factor <- 1.545
unit_residual_factor <- 1.00
py_unit_residual_factor <- 1.00

#--------------------------
# section 4
#--------------------------
# Where can we obtain there information?
# It should be okay to assume these are fixed over time
additive_optional_rate_adj_factor <- 0
multiplicative_optional_rate_adj_factor <- 1

#--------------------------
# section 5
#--------------------------
revenue_lookup_adj_factor <- 1

#--- mean quantity and sd quantity ---#
# information available at ADM
mean_quantity <- 100
sd_quantity <- 25.275654190

#--- price volatility factor ---#
# vary by year, set nationally
# pvf <- 0.21

#--------------------------
# section 6
#--------------------------
capping_reference_yield <- 157
py_capping_reference_yield <- 157
capping_exponent_value <- -2.051
py_capping_exponent_value <- -2.050
capping_reference_rate <- 0.0120
py_capping_reference_rate <- 0.0120
capping_fixed_rate <- 0.008
py_capping_fixed_rate <- 0.008
capping_year <- 2011

#--- beta RPHPE ---#
# Information available at ADM
# Assume fixed?
beta_RPHPE_0 <- -0.079815390
beta_RPHPE_1 <- 1.219518
beta_RPHPE_2 <- -0.4361823
beta_RPHPE_3 <- -0.062436830
beta_RPHPE_4 <- 0.2539943
beta_RPHPE_5 <- 0.07154643
beta_RPHPE_6 <- -0.00367864
beta_RPHPE_7 <- -0.2409182
beta_RPHPE_8 <- 0.384326
beta_RPHPE_9 <- -0.01062107
beta_RPHPE_10 <- -0.04992516
beta_RPHPE_11 <- -0.1323247
beta_RPHPE_12 <- -0.09314001
beta_RPHPE_13 <- 0.2016753
beta_RPHPE_14 <- 0.00120584

#--- beta RP ---#
# Information available at ADM
# Assume fixed?
beta_RP_0 <- -0.096524510
beta_RP_1 <- 1.393955000
beta_RP_2 <- -0.653385200
beta_RP_3 <- -0.052425310
beta_RP_4 <- 0.273246100
beta_RP_5 <- 0.074885210
beta_RP_6 <- 0.001166760
beta_RP_7 <- -0.312272900
beta_RP_8 <- 0.269245800
beta_RP_9 <- -0.226560800
beta_RP_10 <- 0.043531740
beta_RP_11 <- 0.503836700
beta_RP_12 <- -0.110972300
beta_RP_13 <- 0.515274900
beta_RP_14 <- -0.032281610

#--------------------------
# section 9
#--------------------------
# assume fixed
experience_factor <- 1
premium_surcharge_percent <- 1
total_premium_multiplicative_optional_rate_adj_factor <- 1
multiple_commodity_adj_factor <- 1
beg_fr_subsidy_percent <- 0
native_sod_subsidy_amount <- 0

#---------------------
#- County-specific parameters
#---------------------
county_rate <- data.table(
  year = c(2015, 2016),
  reference_amount = c(79, 80),
  exponent_value = c(-1.104, -0.983),
  reference_rate = c(0.022, 0.018),
  fixed_rate = c(0.006, 0.006)
)
```

## Pack the parameters

The codes below pack crop insurance parameters defined above into a single list of multiple objects so that they can be used later in other functions. 

```{r}
ci_data <-
  list(
    c_rate_now =
      county_rate[year == 2016, list(reference_amount, exponent_value, reference_rate, fixed_rate)] %>%
        unlist(),
    c_rate_prev =
      county_rate[year == 2015, list(reference_amount, exponent_value, reference_rate, fixed_rate)] %>%
        unlist(),
    c_pars = c(
      rate_differential_factor, py_rate_differential_factor,
      unit_residual_factor, py_unit_residual_factor
    ),
    beta_RP = c(
      beta_RP_0, beta_RP_1, beta_RP_2, beta_RP_3, beta_RP_4,
      beta_RP_5, beta_RP_6, beta_RP_7, beta_RP_8, beta_RP_9,
      beta_RP_10, beta_RP_11, beta_RP_12, beta_RP_13, beta_RP_14
    ),
    beta_RPHPE = c(
      beta_RPHPE_0, beta_RPHPE_1, beta_RPHPE_2, beta_RPHPE_3, beta_RPHPE_4,
      beta_RPHPE_5, beta_RPHPE_6, beta_RPHPE_7, beta_RPHPE_8, beta_RPHPE_9,
      beta_RPHPE_10, beta_RPHPE_11, beta_RPHPE_12, beta_RPHPE_13, beta_RPHPE_14
    ),
    sec5 = c(mean_quantity, sd_quantity),
    sec6 = c(
      capping_reference_yield, py_capping_reference_yield,
      capping_exponent_value, py_capping_exponent_value,
      capping_reference_rate, py_capping_reference_rate,
      capping_fixed_rate, py_capping_fixed_rate,
      capping_year
    ),
    county_TY = 170,
    #--- current year ---#
    c_year = 2016
  )
```

# Save the pacakged parameters

```{r}
save(N_data, APH_data, prod_data, price_data, ci_data, T, Nk, n_window, disc, rho, mu, sigma, file = "results/pacakged_parameters.RData") 
```